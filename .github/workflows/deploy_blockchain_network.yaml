# This is a manual workflow, hence it must be placed in the default branch of a repository to enable and use
#Author: Rajesh Sanjeevi
#version: 1.0

name: Deploy Blockhain Network
on:
  workflow_dispatch:
    inputs:
      org_name:
        description: "ORGANIZATION NAME"
        required: true
        default: ""
      environment:
        description: "ENVIRONMENT"
        required: true
        default: ""
      role:
        description: "ROLE NAME"
        required: true
        default: ""
      channel_name:
        description: "CHANNEL NAME"
        default: "defaultchannel"
        required: false
      extra_vars:
        description: "EXTRA ARGUMENTS"
        default: ""
        required: false
      org_json:
        description: "Organization credentials (when role=add_new_org) or Orderer tls certificate (when role=new_org)"
        default: ""
        required: false

jobs:
  deploy-blockchain-network:
    environment: ${{ github.event.inputs.org_name }}-${{ github.event.inputs.environment }}
    name: deploy-blockchain-network
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read

    defaults:
      run:
        shell: bash
        working-directory: ansible-automation
    env:
      cluster_name: ${{ secrets.blk_cluster_name }}
      region: ${{ secrets.aws_region }}
      access_id: ${{ secrets.baf_user_access_key }}
      access_key: ${{ secrets.baf_user_secret_key }}
      account: ${{ secrets.aws_account_number }}
      repo_user: ${{ secrets.git_repo_user }}
      repo_user_token: ${{ secrets.git_repo_user_token }}
      repo_user_email: ${{ secrets.git_repo_user_email }}
      registry: ghcr.io/${{ github.actor }}/openidl-org

    steps:
      - name: Checkout code
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.gitactions_user_access_key  }}
          aws-secret-access-key: ${{ secrets.gitactions_user_secret_key }}
          aws-region: ${{ secrets.aws_region }}
          role-to-assume: ${{ secrets.gitactions_eksadm_role }}
          role-external-id: ${{ secrets.gitactions_external_id }}
          role-duration-seconds: 3600 # session valid for 60 minutes
          role-session-name: github-actions
      #    role-skip-session-tagging: true

      - name: Install Ansible and dependencies
        run: |
          pip3 install openshift
          sudo apt-get install -y python3-requests-oauthlib python-yaml jq
          python -m pip install --user ansible==2.9.11

      - name: Install ansible galaxy collection for docker and k8s
        run: |
          ansible-galaxy collection install community.docker
          ansible-galaxy collection install community.kubernetes:==1.2.1

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Update kubeconfig and set context to blockchain cluster
        run: |
          aws eks update-kubeconfig --region ${{ env.region }} --name ${{ env.cluster_name }}

      - name: Install Docker
        run: |
          pip3 install docker

      - name: Log into GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.6.3

      - name: Deploy Vault cluster
        if: github.event.inputs.role == 'vault'
        run: |
          ansible-playbook vault-setup.yml -i ./inventory/ansible_provisioners \
            -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
            -e "cluster_name=${{ env.cluster_name }}" \
            -e "region=${{ env.region }}" \
            -e "access_id=${{ env.access_id }}" \
            -e "access_key=${{ env.access_key }}" \
            -e "account=${{ env.account }}"

      - name: Build and publish baf image
        if: github.event.inputs.role == 'baf_image'
        run: |
          ansible-playbook baf-image.yml -i ./inventory/ansible_provisioners \
            -e "registry=${{ env.registry }}"

      - name: Deploy network
        if: github.event.inputs.role == 'deploy_network'
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
            -e "role=${{ github.event.inputs.role }}" \
            -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
            -e "cluster_name=${{ env.cluster_name }}" \
            -e "region=${{ env.region }}" \
            -e "access_id=${{ env.access_id }}" \
            -e "access_key=${{ env.access_key }}" \
            -e "account=${{ env.account }}" \
            -e "gitops_repo_user=${{ env.repo_user }}" \
            -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
            -e "gitops_repo_user_email=${{ env.repo_user_email }}"

      - name: Reset node
        if: github.event.inputs.role == 'reset'
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
            -e "role=${{ github.event.inputs.role }}" \
            -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
            -e "cluster_name=${{ env.cluster_name }}" \
            -e "region=${{ env.region }}" \
            -e "access_id=${{ env.access_id }}" \
            -e "access_key=${{ env.access_key }}" \
            -e "account=${{ env.account }}" \
            -e "gitops_repo_user=${{ env.repo_user }}" \
            -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
            -e "gitops_repo_user_email=${{ env.repo_user_email }}"

      - name: Deploy chaincode
        if: github.event.inputs.role == 'chaincode'
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
            -e "role=${{ github.event.inputs.role }}" \
            -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
            -e "cluster_name=${{ env.cluster_name }}" \
            -e "region=${{ env.region }}" \
            -e "access_id=${{ env.access_id }}" \
            -e "access_key=${{ env.access_key }}" \
            -e "account=${{ env.account }}" \
            -e "gitops_repo_user=${{ env.repo_user }}" \
            -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
            -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
            -e "channel_name=${{ github.event.inputs.channel_name }}" \
            -e "extra_vars=${{ github.event.inputs.extra_vars }}"

      - name: Deploy add_new_channel
        if: github.event.inputs.role == 'add_new_channel'
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
            -e "role=${{ github.event.inputs.role }}" \
            -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
            -e "cluster_name=${{ env.cluster_name }}" \
            -e "region=${{ env.region }}" \
            -e "access_id=${{ env.access_id }}" \
            -e "access_key=${{ env.access_key }}" \
            -e "account=${{ env.account }}" \
            -e "gitops_repo_user=${{ env.repo_user }}" \
            -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
            -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
            -e "channel_name=${{ github.event.inputs.channel_name }}" \
            -e "extra_vars=${{ github.event.inputs.extra_vars }}"

      - name: Deploy add_new_org
        if: github.event.inputs.role == 'add_new_org'
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
            -e "role=${{ github.event.inputs.role }}" \
            -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
            -e "cluster_name=${{ env.cluster_name }}" \
            -e "region=${{ env.region }}" \
            -e "access_id=${{ env.access_id }}" \
            -e "access_key=${{ env.access_key }}" \
            -e "account=${{ env.account }}" \
            -e "gitops_repo_user=${{ env.repo_user }}" \
            -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
            -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
            -e "channel_name=${{ github.events.inputs.channel_name }}" \
            -e "org_json=${{ github.events.inputs.org_json }}"
