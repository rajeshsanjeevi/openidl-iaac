#!groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
node('master') {
    def url =
    checkout()
    prepareAWSCode()
    buildAWSInfra()
}
def checkout() {
    stage('Clone') {
        git credentialsId: 'github', branch: "${params.GITHUB_BRANCH}", url: 'https://github.com/rajeshsanjeevi/openidl-iaac.git'
    }
}
def prepareAWSCode() {
    sh '''
        cp ./aws/carrier.tfvars ./aws/aws_resources/carrier.auto.tfvars
        tar -czf aws-content.tar.gz -C aws/aws_resources --exclude .git .
        echo "Successfully prepared the AWS resources code bundle"
    '''
 }
def prepareK8sCode() {
    sh '''
        cp ./aws/carrier.tfvars ./aws/k8s_resources/carrier.auto.tfvars
        tar -czf k8s-content.tar.gz -C aws/k8s_resources --exclude .git .
        echo "Successfully prepared the K8s resources code bundle"
    '''
 }
def buildAWSInfra() {
    stage('AWS-TFPlan') {
        def ws_id = getWorkspaceId()
        def (config_version, upload_url) = createConfig("${ws_id}")
        def upload_status = uploadConfig("${upload_url}")
        println("Workspace Id:" + ws_id)
        println("Config Version:" + config_version)
        println("Upload URL:" + upload_url)
        def runid = ""
        runid = Plan("${ws_id}")
        println("Run ID:" + runid)
        waitForPlan("${runid}")
    }
}
def getWorkspaceId() {
    def response = httpRequest(
        customHeaders: [
                [ name: "Authorization", value: "Bearer " + "${env.TF_BEARER_TOKEN}" ],
                [ name: "Content-Type", value: "application/vnd.api+json" ]
            ],
        url: "https://" + "${params.TF_ADDRESS}" + "/api/v2/organizations/" + "${params.TF_ORGNAME}" + "/workspaces/" + "${params.TF_AWS_WORKSPACE}"
    )
    def data = new JsonSlurper().parseText(response.content)
    println ("Workspace Id: " + data.data.id)
    return data.data.id
}
def createConfig(ws_id) {
    def payload = """
{
  "data": {
    "type": "configuration-versions",
    "attributes": {
      "auto-queue-runs": false
    }
  }
}
    """
     def response = httpRequest(
        customHeaders: [
                [ name: "Authorization", value: "Bearer " + "${env.TF_BEARER_TOKEN}" ],
                [ name: "Content-Type", value: "application/vnd.api+json" ]
            ],
        httpMode: 'POST',
        requestBody: "${payload}",
        url: "https://" + "${params.TF_ADDRESS}" + "/api/v2/workspaces/" + "${ws_id}" + "/configuration-versions"
    )
    def data = new JsonSlurper().parseText(response.content)
    println ("Config Version: " + data.data.id)
    def upload_url = data.data.attributes."upload-url"
    println ("Upload URL: " + data.data.attributes."upload-url")
    return [data.data.id, data.data.attributes."upload-url"]
}
def uploadConfig(url) {
         def response = httpRequest(
        customHeaders: [
                [ name: "Authorization", value: "Bearer " + "${env.TF_BEARER_TOKEN}" ],
                [ name: "Content-Type", value: "application/octet-stream" ]
            ],
        httpMode: 'PUT', multipartName: 'aws-content', responseHandle: 'NONE',
        uploadFile: './aws-content.tar.gz',
        url: "${url}"
    )
}
def Plan(ws_id) {
    def payload = """
{
    "data": {
        "attributes": {
            "is-destroy":false,
            "message": "Triggered run from Jenkins (build #${env.BUILD_NUMBER})"
        },
        "type":"runs",
        "relationships": {
            "workspace": {
                "data": {
                    "type": "workspaces",
                    "id": "${ws_id}"
                }
            }
        }
    }
}
    """
    def response = httpRequest(
        customHeaders: [
                [ name: "Authorization", value: "Bearer " + "${env.TF_BEARER_TOKEN}" ], 
                [ name: "Content-Type", value: "application/vnd.api+json" ]
            ],
        httpMode: 'POST',
        requestBody: "${payload}",
        url: "https://" + "${params.TF_ADDRESS}" + "/api/v2/runs"
    )
    def data = new JsonSlurper().parseText(response.content)
    println ("Run Id: " + data.data.id)
    return data.data.id
}
def getPlanStatus(runid) {
    def result = ""
    def response = httpRequest(
        customHeaders: [[ name: "Authorization", value: "Bearer " + "${env.TF_BEARER_TOKEN}" ]],
        url: "https://" + "${params.TF_ADDRESS}" + "/api/v2/runs/${runid}"
    )
    def data = new JsonSlurper().parseText(response.content)
    switch (data.data.attributes.status) {
        case 'pending':
        case 'plan_queued':
            result = "pending"
            break
        case 'planning':
            result = "planning"
            break
        case 'planned':
            result = "planned"
            break
        case 'cost_estimating':
        case 'cost_estimated':
            result = "costing"
            break
        case 'policy_checking':
            result = "policy"
            break
        case 'policy_override':
            println(response.content)
            result = "approve_policy:" + data.data.relationships["policy-checks"].data[0].id
            break
        case 'policy_checked':
            result = "apply_plan"
            break
        default:
            result = "running"
            break
    }
    return result
}
def waitForPlan(runid) {
    def count = 0
    while (true) {
        def status = getPlanStatus(runid)
        println("Status: " + status)

        // If a policy requires an override, prompt in the pipeline
        if (status.startsWith("approve_policy")) {
            def override
            try {
                override = input (message: 'Override policy?', 
                                  ok: 'Continue', 
                                  parameters: [ booleanParam(
                                      defaultValue: false,
                                      description: 'A policy restriction is enforced on this workspace. Check the box to approve overriding the policy.', 
                                      name: 'Override')
                                  ])
            } catch (err) {
                override = false
            }

            // If we're overriding, tell terraform. Otherwise, discard the run
            if (override == true) {
                println('Overriding!')
                def item = status.split(':')[1]

                def overridden = overridePolicy(item)
                if (!overridden) {
                    println("Could not override the policy")
                    discardRun(runid)
                    error("Could not override the Sentinel policy")
                    break
                }
            } else {
                println('Rejecting!')
                discardRun(runid)
                error("The pipeline failed due to a Sentinel policy restriction.")
                break
            }
        }

        // If we're ready to apply, prompt in the pipeline to do so
        if (status == "finished") {
            def apply
            try {
                apply = input (message: 'Confirm Apply', ok: 'Continue', 
                                    parameters: [booleanParam(defaultValue: false,
                                    description: 'Would you like to continue to apply this run?', name: 'Apply')])
            } catch (err) {
                apply = false
            }

            // If we're going to apply, tell Terraform. Otherwise, discard the run
            if (apply == true) {
                println('Applying plan')
                applyRun(runid)
            }
            else {
                println('Rejecting!')
                discardRun(runid)
                error("The pipeline failed due to a manual rejection of the plan.")
                break
            }
        }
        if (count > 60) break
        count++
        sleep(5)
    }
}
def waitforApply(runid) {
    def count = 0
    while (true) {
        
        println("Status: " + status)

        if (status == 'discarded') {
            println("This run has been discarded")
            error("The Terraform run has been discarded, and the pipeline cannot continue.")
            break
        }
        if (status == 'canceled') {
            println("This run has been canceled outside the pipeline")
            error("The Terraform run has been canceled outside the pipeline, and the pipeline cannot continue.")
            break
        }
        if (status == 'errored') {
            println("This run has encountered an error while applying")
            error("The Terraform run has encountered an error while applying, and the pipeline cannot continue.")
            break
        }
        if (status == 'applied') {
            println("This run has finished applying")
            break
        }

        if (count > 3600) break
        count++
        sleep(10)
    }
}
def applyRun(runid) {
    def response = httpRequest(
        customHeaders: [
                [ name: "Authorization", value: "Bearer " + "${env.TF_BEARER_TOKEN}" ], 
                [ name: "Content-Type", value: "application/vnd.api+json" ]
            ],
        httpMode: 'POST',
        requestBody: '{ "comment": "Apply confirmed" }',
        url: "https://" + "${params.TF_ADDRESS}" + "/api/v2/runs/${runid}/actions/apply"
    )
}
def discardRun(runid) {
    def response = httpRequest(
        customHeaders: [
                [ name: "Authorization", value: "Bearer " + "${env.TF_BEARER_TOKEN}" ], 
                [ name: "Content-Type", value: "application/vnd.api+json" ]
            ],
        httpMode: 'POST',
        responseBody: '{ comment: "Run has been discarded" }',
        url: "https://" + "${params.TF_ADDRESS}" + "/api/v2/runs/${runid}/actions/discard"
    )
}
def overridePolicy(policyid) {
    def response = httpRequest(
        customHeaders: [
                [ name: "Authorization", value: "Bearer " + "${env.TF_BEARER_TOKEN}" ], 
                [ name: "Content-Type", value: "application/vnd.api+json" ]
            ],
        httpMode: 'POST',
        url: "https://" + "${params.TF_ADDRESS}" + "/api/v2/policy-checks/${policyid}/actions/override"
    )

    def data = new JsonSlurper().parseText(response.content)
    if (data.data.attributes.status != "overridden") {
        return false
    }
    else {
        return true
    }
}
def getApplyStatus(runid) {
    def result = ""
    def response = httpRequest(
        customHeaders: [[ name: "Authorization", value: "Bearer " + "${env.TF_BEARER_TOKEN}" ]],
        url: "https://" + "${params.TF_ADDRESS}" + "/api/v2/runs/${runid}"
    )
    def data = new JsonSlurper().parseText(response.content)
    switch (data.data.attributes.status) {
        case 'discarded':
        case 'errored':
        case 'canceled':
            result = data.data.attributes.status
            break
        default:
            result = "pending"
    }
    return result
}



