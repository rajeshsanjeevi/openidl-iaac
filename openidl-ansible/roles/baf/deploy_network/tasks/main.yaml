- name: Delete k8s namespace
  community.kubernetes.k8s:
    name: openidl-baf
    api_version: v1
    kind: Namespace
    state: absent
    wait: yes

- name: Create a k8s namespace
  community.kubernetes.k8s:
    name: openidl-baf
    api_version: v1
    kind: Namespace
    state: present

- name: Create secret for aws credentials
  community.kubernetes.k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: Secret
      type: Opaque             
      metadata:
        name: openidl-baf-aws
        namespace: openidl-baf     
      data:
        ID: "{{ access_id | b64encode }}"
        KEY: "{{ access_key | b64encode }}"

# - name: Get vault token
#   shell: aws ssm 
#   register: output

- name: Generate network config file
  template:
    src: templates/network-setup.yml.j2
    dest: "./network-setup.yml"
    mode: 0755

- name: Create configmap for network configuration file
  shell: |
    kubectl -n openidl-baf create configmap network-setup --from-file=network-setup.yml=./network-setup.yml

- name: Launch baf container
  community.kubernetes.k8s:
    state: present
    wait: yes
    wait_condition:
      type: "Ready"
    definition:
      apiVersion: v1
      kind: Pod
      metadata:
        name: openidl-baf
        namespace: openidl-baf
      spec:
        containers:
        - name: baf
          image: suryalnvs/openidl-baf
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: openidl-baf-aws
                key: ID
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: openidl-baf-aws
                key: KEY
          - name: AWS_REGION
            value: "{{ region }}"
          - name: ROLE
            value: "{{ role }}"
          - name: ORG_NAME
            value: "{{ network.org_name }}"
          - name: ORDERERORG
            value: "{{ network.ordererorg }}"
          command: ["sh", "-c"]
          args: 
          - |-
            #!/bin/bash -e
            git clone https://github.com/suryalanka-cy/blockchain-automation-framework.git
            mkdir /home/blockchain-automation-framework/build
            aws eks --region {{ region }} update-kubeconfig --name {{ cluster_name }}
            cd /home/blockchain-automation-framework
            ansible-playbook platforms/shared/configuration/environment-setup.yaml -e "@/home/config/network-setup.yml"
            ansible-playbook platforms/shared/configuration/kubernetes-env-setup.yaml -e "@/home/config/network-setup.yml"
            if [ $ROLE != "deploy_network" -o $ROLE != "reset" ]; then
              POD_NAME=$(kubectl -n ${ORG_NAME}-net get pods --selector=name=ca-tools --output=jsonpath={.items..metadata.name})
              mkdir -p /home/blockchain-automation-framework/platforms/hyperledger-fabric/configuration/build
              kubectl -n ${ORG_NAME}-net cp $POD_NAME:/crypto-config /home/blockchain-automation-framework/platforms/hyperledger-fabric/configuration/build/crypto-config
              if [ $ORDERERORG ]; then
                POD_NAME=$(kubectl -n ordererorg-net get pods --selector=name=ca-tools --output=jsonpath={.items..metadata.name})
                kubectl -n ordererorg-net cp $POD_NAME:/crypto-config /home/blockchain-automation-framework/platforms/hyperledger-fabric/configuration/build/crypto-config
              fi
            fi
            if [ $ROLE = "deploy_network" ]; then
              ansible-playbook platforms/hyperledger-fabric/configuration/deploy-network.yaml -e "@/home/config/network-setup.yml" -e "add_new_org=false"
            elif [ $ROLE = "chaincode" ]; then
              ansible-playbook platforms/hyperledger-fabric/configuration/chaincode-ops.yaml -e "@/home/config/network-setup.yml" {{ skip_tags | default() }}
            elif [ $ROLE = "reset" ]; then
              ansible-playbook platforms/hyperledger-fabric/configuration/reset-network.yaml -e "@/home/config/network-setup.yml"
            elif [ $ROLE = "new_org" ]; then
              ansible-playbook platforms/hyperledger-fabric/configuration/launch-new-organization.yaml -e "@/home/config/network-setup.yml" -e "add_new_org=true"
              ansible-playbook platforms/hyperledger-fabric/configuration/add-organization-to-new-channel.yaml -e "@/home/config/network-setup.yml"
            elif [ $ROLE = "add_org_to_channel" ]; then
              ansible-playbook platforms/hyperledger-fabric/configuration/add-organization-to-new-channel.yaml -e "@/home/config/network-setup.yml"
            elif [ $ROLE = "add_new_org" ]; then
              ansible-playbook platforms/hyperledger-fabric/configuration/syschannel-add-org.yaml -e "@/home/config/network-setup.yml" -e "add_new_org=new"
              ansible-playbook platforms/hyperledger-fabric/configuration/creator-fetch-add-org.yaml -e "@/home/config/network-setup.yml" -e "add_new_org=new"
              ansible-playbook platforms/hyperledger-fabric/configuration/creator-sign-update-add-org.yaml -e "@/home/config/network-setup.yml" -e "add_new_org=new"
            elif [ $ROLE = "join_new_org" ]; then
              ansible-playbook platforms/hyperledger-fabric/configuration/join-peer-add-org.yaml -e "@/home/config/network-setup.yml" -e "add_new_org=new"
              ansible-playbook platforms/hyperledger-fabric/configuration/chaincode-ops.yaml -e "@/home/config/network-setup.yml" -e "add_new_org=new"
            elif [ $ROLE = "add_new_channel" ]; then
              ansible-playbook platforms/hyperledger-fabric/configuration/add-new-channel.yaml -e "@/home/config/network-setup.yml" -e "fetch_certs=false" {{ skip_tags | default() }}
            elif [ $ROLE = "health_check" ]; then
              echo "Hello World"
              kubectl get ns
            fi
          volumeMounts:
          - name: network-config
            mountPath: "/home/config/"
            readOnly: true
        volumes:
        - name: network-config
          configMap:
            name: network-setup
        restartPolicy: Never
        backoffLimit: 0

- name: baf logs
  shell: kubectl -n openidl-baf logs -f openidl-baf
  register: baf_logs

- name: baf logs 
  debug:
    msg: '{{ baf_logs.stdout_lines }}'

- name: Delete baf pob
  community.kubernetes.k8s:
    name: openidl-baf
    namespace: openidl-baf
    api_version: v1
    kind: Pod
    state: absent
    wait: yes